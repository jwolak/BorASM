#===============================================================================
# Version extraction script for BorASM
# Extracts version from package.json and generates version.h header
#===============================================================================

cmake_minimum_required(VERSION 3.10)

# Function to extract version from package.json
function(extract_version_from_json JSON_FILE OUTPUT_MAJOR OUTPUT_MINOR OUTPUT_PATCH)
    if(NOT EXISTS ${JSON_FILE})
        message(FATAL_ERROR "package.json not found at: ${JSON_FILE}")
    endif()

    # Read package.json file
    file(READ ${JSON_FILE} JSON_CONTENT)
    
    # Extract version string using regex
    string(REGEX MATCH "\"version\"[ \t]*:[ \t]*\"([0-9]+)\\.([0-9]+)\\.([0-9]+)\"" VERSION_MATCH ${JSON_CONTENT})
    
    if(NOT VERSION_MATCH)
        message(FATAL_ERROR "Could not extract version from package.json. Expected format: \"version\": \"X.Y.Z\"")
    endif()
    
    # Extract individual components
    set(MAJOR ${CMAKE_MATCH_1})
    set(MINOR ${CMAKE_MATCH_2})
    set(PATCH ${CMAKE_MATCH_3})
    
    # Validate extracted values
    if(NOT MAJOR MATCHES "^[0-9]+$" OR NOT MINOR MATCHES "^[0-9]+$" OR NOT PATCH MATCHES "^[0-9]+$")
        message(FATAL_ERROR "Invalid version format extracted: ${MAJOR}.${MINOR}.${PATCH}")
    endif()
    
    # Set output variables
    set(${OUTPUT_MAJOR} ${MAJOR} PARENT_SCOPE)
    set(${OUTPUT_MINOR} ${MINOR} PARENT_SCOPE)
    set(${OUTPUT_PATCH} ${PATCH} PARENT_SCOPE)
    
    message(STATUS "Extracted version: ${MAJOR}.${MINOR}.${PATCH} from ${JSON_FILE}")
endfunction()

# Function to generate version header file
function(generate_version_header VERSION_MAJOR VERSION_MINOR VERSION_PATCH OUTPUT_FILE)
    # Calculate build number (days since epoch for uniqueness)
    string(TIMESTAMP BUILD_NUMBER "%j" UTC)
    string(TIMESTAMP BUILD_DATE "%Y-%m-%d" UTC)
    string(TIMESTAMP BUILD_TIME "%H:%M:%S" UTC)
    string(TIMESTAMP BUILD_YEAR "%Y" UTC)
    
    # Create version string
    set(VERSION_STRING "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
    
    # Generate Git information if available
    find_package(Git QUIET)
    if(GIT_FOUND)
        execute_process(
            COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            OUTPUT_VARIABLE GIT_COMMIT_HASH
            OUTPUT_STRIP_TRAILING_WHITESPACE
            ERROR_QUIET
        )
        
        execute_process(
            COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            OUTPUT_VARIABLE GIT_BRANCH
            OUTPUT_STRIP_TRAILING_WHITESPACE
            ERROR_QUIET
        )
        
        execute_process(
            COMMAND ${GIT_EXECUTABLE} describe --tags --always --dirty
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            OUTPUT_VARIABLE GIT_DESCRIBE
            OUTPUT_STRIP_TRAILING_WHITESPACE
            ERROR_QUIET
        )
        
        if(NOT GIT_COMMIT_HASH)
            set(GIT_COMMIT_HASH "unknown")
        endif()
        
        if(NOT GIT_BRANCH)
            set(GIT_BRANCH "unknown")
        endif()
        
        if(NOT GIT_DESCRIBE)
            set(GIT_DESCRIBE "unknown")
        endif()
    else()
        set(GIT_COMMIT_HASH "unknown")
        set(GIT_BRANCH "unknown")
        set(GIT_DESCRIBE "unknown")
    endif()

    # Write header file line by line to avoid escaping issues
    file(WRITE ${OUTPUT_FILE} "/*
 * Auto-generated version header for BorASM
 * Generated at compile time from package.json
 * DO NOT EDIT MANUALLY - This file is automatically generated
 */

#ifndef BORASM_VERSION_H
#define BORASM_VERSION_H

#include <string>

namespace BorASM {
namespace Version {

// Version components
constexpr int MAJOR = ${VERSION_MAJOR};
constexpr int MINOR = ${VERSION_MINOR};
constexpr int PATCH = ${VERSION_PATCH};
constexpr int BUILD = ${BUILD_NUMBER};

// Version strings
constexpr const char* VERSION_STRING = \"${VERSION_STRING}\";
constexpr const char* FULL_VERSION_STRING = \"${VERSION_STRING}.${BUILD_NUMBER}\";

// Build information
constexpr const char* BUILD_DATE = \"${BUILD_DATE}\";
constexpr const char* BUILD_TIME = \"${BUILD_TIME}\";
constexpr const char* BUILD_YEAR = \"${BUILD_YEAR}\";

// Git information
constexpr const char* GIT_COMMIT_HASH = \"${GIT_COMMIT_HASH}\";
constexpr const char* GIT_BRANCH = \"${GIT_BRANCH}\";
constexpr const char* GIT_DESCRIBE = \"${GIT_DESCRIBE}\";

// Utility functions
inline std::string GetVersionString() {
    return std::string(VERSION_STRING);
}

inline std::string GetFullVersionString() {
    return std::string(FULL_VERSION_STRING);
}

inline std::string GetBuildInfo() {
    return std::string(BUILD_DATE) + \" \" + std::string(BUILD_TIME);
}

inline std::string GetGitInfo() {
    return std::string(GIT_BRANCH) + \"@\" + std::string(GIT_COMMIT_HASH);
}

inline std::string GetCompleteVersionInfo() {
    return GetFullVersionString() + \" (\" + GetGitInfo() + \", built \" + GetBuildInfo() + \")\";
}

// Version comparison functions
inline bool IsVersionAtLeast(int major, int minor, int patch = 0) {
    if (MAJOR > major) return true;
    if (MAJOR < major) return false;
    if (MINOR > minor) return true;
    if (MINOR < minor) return false;
    return PATCH >= patch;
}

inline bool IsExactVersion(int major, int minor, int patch) {
    return MAJOR == major && MINOR == minor && PATCH == patch;
}

// Development/release detection
#ifdef NDEBUG
constexpr bool IS_RELEASE_BUILD = true;
constexpr const char* BUILD_TYPE = \"Release\";
#else
constexpr bool IS_RELEASE_BUILD = false;
constexpr const char* BUILD_TYPE = \"Debug\";
#endif

} // namespace Version
} // namespace BorASM

#endif // BORASM_VERSION_H")

    message(STATUS "Generated version header: ${OUTPUT_FILE}")
    message(STATUS "Version: ${VERSION_STRING} (build ${BUILD_NUMBER})")
    message(STATUS "Git: ${GIT_BRANCH}@${GIT_COMMIT_HASH}")
endfunction()